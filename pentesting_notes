<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Tools" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667068635" ts_lastsave="1667850088">
    <node name="Information Gathering / Reconnaissance" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667850088" ts_lastsave="1667850095">
      <node name="Nmap" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667068359" ts_lastsave="1668097951">
        <rich_text>Network Mapper (Nmap) is a network scanning and host detection tool

Nmap is a very powerful utility that can be used to:
• Detect the live host on the network (host discovery)
• Detect the open ports on the host (port discovery or enumeration)
• Detect the software and the version to the respective port (service discovery)
• Detect the operating system, hardware address and software version
• Detect the vulnerability and security holes (Nmap scripts)


</rich_text>
        <rich_text scale="h2">Infos:</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://nmap.org/">https://nmap.org/</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://nmap.org/nsedoc/scripts/">https://nmap.org/nsedoc/scripts/</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://tryhackme.com/room/furthernmap">https://tryhackme.com/room/furthernmap</rich_text>
        <node name="Port states" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667246560" ts_lastsave="1667247424">
          <rich_text>Nmap differentiates between six port states: </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">unfiltered</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>

• </rich_text>
          <rich_text weight="heavy">open</rich_text>
          <rich_text>
   ◇ An application is actively accepting connections (TCP, UDP, SCTP)

• </rich_text>
          <rich_text weight="heavy">closed</rich_text>
          <rich_text>
   ◇ A closed port is accessible (it receives and responds to Nmap probe packets), buht there is no application listening on it.

• </rich_text>
          <rich_text weight="heavy">filtered</rich_text>
          <rich_text>
   ◇ Nmap cannot determing whether the port is open. (Sometimes they respond with ICMP error messages, but dropped packets by filters (like firewalls) are more common.

• </rich_text>
          <rich_text weight="heavy">unfiltered</rich_text>
          <rich_text>
   ◇ The port is accessible, but Nmap is unable to determine whether it is open or closed. Only the ACK scan classifies ports into this state

• </rich_text>
          <rich_text weight="heavy">open|filtered</rich_text>
          <rich_text>
   ◇ Nmap is unable to determine whether a port is open or filtered
   ◇ Occurs for scan types in which open ports give no response
   ◇ UDP/FIN/NULL/Xmas scans classify ports this way

• </rich_text>
          <rich_text weight="heavy">closed|filtered</rich_text>
          <rich_text>
   ◇ Nmap is unable to determine whether a port is closed or filtered
   ◇ Only used for the IP ID idle scan</rich_text>
        </node>
        <node name="Scan techniques" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667069661" ts_lastsave="1667315021">
          <rich_text>• </rich_text>
          <rich_text weight="heavy">TCP SYN scan</rich_text>
          <rich_text> (-sS) (default):
   ◇ Sends SYN packets, but does not complete the handshake/connection
   ◇ Quick, relative ubotrusive and stealthy
   ◇ Response handling:
      ▪ SYN/ACK: indicates listening port (</rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>)
      ▪ RST: indicates non-listener (</rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>)
      ▪ no response/ICMP unreachable: port is </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>

• </rich_text>
          <rich_text weight="heavy">TCP connect scan</rich_text>
          <rich_text> (-sT):
   ◇ Uses </rich_text>
          <rich_text style="italic">connect</rich_text>
          <rich_text> system call instead of writing raw packets (which requires root privileges) 
   ◇ Completes the TCP connection (noisy, more likely to be logged), is slower than SYN scan

• </rich_text>
          <rich_text weight="heavy">UDP scan</rich_text>
          <rich_text> (-sU):
   ◇ Can be combined with a TCP scan type (e.g. -sS) to check both protocols
   ◇ Sends UDP packets to ports, with mostly empty packet data (which can be specified)
   ◇ Response handling:
      ▪ ICMP port unreachable: the port is </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>
      ▪ Other ICMP erros: the port is </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>
      ▪ UDP response packet: the port is </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>
      ▪ No response after retransmission: port is </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text> (Version detection -sV can help to differentiate the truly open ports from the filtered ones

• </rich_text>
          <rich_text weight="heavy">SCTP INIT scan</rich_text>
          <rich_text> (-sY):
   ◇ Equivalent of a TCP SYN scan (doest not complete connection, quick, unobtrusive and stealthy)
   ◇ Reliable differentiation between </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>, </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text> and </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text> states

• </rich_text>
          <rich_text weight="heavy">TCP NULL, FIN, Xmas scan</rich_text>
          <rich_text> (-sN, -sF, sX):
   ◇ Three scan types that exploit RFC 793 behaviour. Any combination of flags that dont contain SYN, RST or ACK work the same.
   ◇ Null scan: no bits set, TCP flag header is 0
   ◇ Fin scan: just FIN flag is set
   ◇ Xmas scan: FIN, PSH and URG flags are set
   ◇ Response handling:
      ▪ RST packet recieved: the port is </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>
      ▪ No response: means </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>
      ▪ ICMP unreachable error: port is marked </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>

• </rich_text>
          <rich_text weight="heavy">TCP ACK scan</rich_text>
          <rich_text> (-sA):
   ◇ This scan is different than the previous ones. It is used to map out firewall rulesets, determining whether they are stateful or not and which ports are filtered
   ◇ Open and closed ports respond with a RST packet, Nmap marks them as </rich_text>
          <rich_text style="italic">unfiltered</rich_text>
          <rich_text>
   ◇ Ports that dont respond or send ICMP error messages are labeled </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>

• </rich_text>
          <rich_text weight="heavy">TCP Window scan</rich_text>
          <rich_text> (-sW): 
   ◇ Exactly the same as ACK scan, but it attempts to differentiate open ports from closed ones (by examining the TCP Window field).
   ◇ Relies on an implementation detail of a minority of systems, thus unreliable.

• </rich_text>
          <rich_text weight="heavy">TCP Maimon scan</rich_text>
          <rich_text> (-sM):
   ◇ Same as NULL, FIN, Xmas scan, except that the probe is FIN/ACK

• </rich_text>
          <rich_text weight="heavy">Custom TCP scan</rich_text>
          <rich_text> (--scanflags):
   ◇ Allows to scan with arbitrary specified TCP flags (URG, ACK, PSH, RST, SYN, FIN).
   ◇ E.g. --scanflags URGACKPSHRSTSYNFIN (sets every flag). The order is relevant
   ◇ Additionally specifying a scan type (such as -sA or -sF), tells Nmap how to interpret responses (default SYN scan)

• </rich_text>
          <rich_text weight="heavy">SCTP COOKIE ECHO scan</rich_text>
          <rich_text> (-sZ): 
   ◇ Advanced SCTP scan. SCTP implementations should drop packets containing COOKIE ECHO on open ports, but send an ABORT if the port is closed.
   ◇ Useful if firewalls block INIT chunks, but not COOKIE ECHO chunks.
   ◇ Cannon differentiate between </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text> and </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text> ports, resulting in the </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text> state

• </rich_text>
          <rich_text weight="heavy">Idle scan </rich_text>
          <rich_text>(-sI &lt;zombie host&gt;[:&lt;probeport&gt;]):
   ◇ Truly blind TCP scan (i.e. no packets are sent to the target from your real IP address). The target only sees packets coming from the specified zombie machine
   ◇ This scan also permits to map out IP-based trust relationships between targets and zombie machines

• </rich_text>
          <rich_text weight="heavy">IP protocol scan </rich_text>
          <rich_text>(-sO):
   ◇ Allows to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by target machines.
   ◇ Technically this is not a port scan
   ◇ It works similar to UDP scan. Instead of iterating through the port number field of a UDP packet, it sends IP packet headers and iterates through the eight-bit IP protocol field.
   ◇ Response handling:
      ▪ Any response from target: mark protocol as </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>
      ▪ ICMP protocol unreachable error: mark the protocol as </rich_text>
          <rich_text style="italic">closed</rich_text>
          <rich_text>
      ▪ ICMP port unreachable: marks protocol as </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>
      ▪ Other ICMP unreachable errors: mark protocol as </rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>
      ▪ No response: mark protocol as </rich_text>
          <rich_text style="italic">open</rich_text>
          <rich_text>|</rich_text>
          <rich_text style="italic">filtered</rich_text>
          <rich_text>

• </rich_text>
          <rich_text weight="heavy">FTP bounce scan</rich_text>
          <rich_text> (-b &lt;FTP relay host&gt;):
   ◇ Exploit a feature of the FTP protocol (RFC 959), the so-called proxy FTP connections. Mostly not supported anymore
   ◇ Uses an FTP server to send files to the target machine and scan its ports
   ◇ The NSE script </rich_text>
          <rich_text style="italic">ftp-bounce </rich_text>
          <rich_text>can be used to check whether a FTP service is susceptible</rich_text>
        </node>
        <node name="Firewall evasion" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1668096323" ts_lastsave="1668096324">
          <rich_text link="webs https://nmap.org/book/man-bypass-firewalls-ids.html">https://nmap.org/book/man-bypass-firewalls-ids.html</rich_text>
        </node>
      </node>
    </node>
    <node name="Web Application Pentesting" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667849171" ts_lastsave="1667850051">
      <node name="Gobuster" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667645412" ts_lastsave="1667927550">
        <rich_text>Gobuster is a tool used to </rich_text>
        <rich_text weight="heavy">brute-force</rich_text>
        <rich_text>:
• </rich_text>
        <rich_text weight="heavy">URIs</rich_text>
        <rich_text> (directories and files) in web sites
• </rich_text>
        <rich_text weight="heavy">DNS subdomains</rich_text>
        <rich_text>
• </rich_text>
        <rich_text weight="heavy">Virtual Host</rich_text>
        <rich_text> names on target web servers
• Open Amazon S3 buckets


</rich_text>
        <rich_text scale="h2">Usage:</rich_text>
        <rich_text>
gobuster dir -u http://&lt;ip&gt;:&lt;port&gt; -w &lt;word list location&gt;

Help for dir brute-forcing: gobuster dir --help</rich_text>
      </node>
      <node name="BurpSuite" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667849893" ts_lastsave="1667927588">
        <rich_text>- Burp can capture and manipulate all of the traffic between an attacker and a webserver: this is the core of the framework.
- Intercept, view, and modify web requests prior to them being sent to the target server


</rich_text>
        <rich_text scale="h2">Tools:</rich_text>
        <rich_text>
- </rich_text>
        <rich_text weight="heavy">Proxy:</rich_text>
        <rich_text> The most well-known aspect of Burp Suite, the Burp Proxy allows us to intercept and modify requests/responses when interacting with web applications.
- </rich_text>
        <rich_text weight="heavy">Repeater:</rich_text>
        <rich_text> allows us to capture, modify, then resend the same request numerous times
- </rich_text>
        <rich_text weight="heavy">Intruder:</rich_text>
        <rich_text> allows us to spray an endpoint with requests. This is often used for bruteforce attacks or to fuzz endpoints.
- </rich_text>
        <rich_text weight="heavy">Decoder: </rich_text>
        <rich_text>provides a service for transforming data -- either in terms of decoding captured information, or encoding a payload prior to sending it to the target.
- </rich_text>
        <rich_text weight="heavy">Comparer:</rich_text>
        <rich_text> allows us to compare two pieces of data at either word or byte level.
- </rich_text>
        <rich_text weight="heavy">Sequencer:</rich_text>
        <rich_text> allows us to assess the randomness of tokens such as session cookie values or other supposedly random generated data.


</rich_text>
        <rich_text scale="h2">Scoping and Targeting:</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="node 8">BurpSuite</rich_text>
        <rich_text> allows us to specify what to log and/or intercept:
- Target -&gt; Scope (for logging)
- Proxy -&gt; Options -&gt; Intercept Client Requests: “And” “URL” “Is in target scope” (for intercepting with proxy)


</rich_text>
        <rich_text scale="h2">Infos:</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://tryhackme.com/room/burpsuitebasics">https://tryhackme.com/room/burpsuitebasics</rich_text>
      </node>
    </node>
  </node>
  <node name="TryHackMe" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1667410216" ts_lastsave="1668715327">
    <node name="Learning Paths" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1668715327" ts_lastsave="1668715329">
      <node name="Web Fundamentals" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1668687685" ts_lastsave="1668715333">
        <node name="Content Discovery" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1668687704" ts_lastsave="1668716025">
          <rich_text scale="h1">Manual Discovery</rich_text>
          <rich_text>

- </rich_text>
          <rich_text weight="heavy">robots.txt</rich_text>
          <rich_text>
contains information for bots which sites are dis-/allowed to index

- </rich_text>
          <rich_text weight="heavy">favicon</rich_text>
          <rich_text>
a standard favicon could give information about what framework is used.
Use: </rich_text>
          <rich_text style="italic">curl &lt;favicon-url&gt; | md5sum</rich_text>
          <rich_text> and check hash against the DB: </rich_text>
          <rich_text link="webs https://wiki.owasp.org/index.php/OWASP_favicon_database">https://wiki.owasp.org/index.php/OWASP_favicon_database</rich_text>
          <rich_text> to see what framework is used.

- </rich_text>
          <rich_text weight="heavy">sitemap.xml</rich_text>
          <rich_text>
contains a list of every resource that should be indexed

- </rich_text>
          <rich_text weight="heavy">HTTP headers</rich_text>
          <rich_text>
HTTP response headers can contain information like the webserver software and scripting/programming language in use.

Verbose output (+headers):
</rich_text>
          <rich_text style="italic">curl &lt;url&gt; -v</rich_text>
          <rich_text>

Only show headers: 
</rich_text>
          <rich_text style="italic">curl -D - &lt;url&gt; -o /dev/null</rich_text>
          <rich_text>

- </rich_text>
          <rich_text weight="heavy">Framework stack</rich_text>
          <rich_text>
Once established the framework, look at the official framework's site for more information about content to discover (e.g. administration panel with default credentials)


</rich_text>
          <rich_text scale="h1">OSINT</rich_text>
          <rich_text>

- </rich_text>
          <rich_text weight="heavy">Google Hacking/Dorking</rich_text>
          <rich_text>
</rich_text>
          <rich_text link="webs https://en.wikipedia.org/wiki/Google_hacking">https://en.wikipedia.org/wiki/Google_hacking</rich_text>
          <rich_text>

Example filters:
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

- </rich_text>
          <rich_text weight="heavy">Wappalyzer</rich_text>
          <rich_text>
Tool that helps identify what  technologies a website uses (frameworks, CMS, etc.)

- </rich_text>
          <rich_text weight="heavy">Wayback Machine</rich_text>
          <rich_text>

- </rich_text>
          <rich_text weight="heavy">GitHub</rich_text>
          <rich_text>
Use the search feature to look for company  names or website names to try and locate repositories for your target

- </rich_text>
          <rich_text weight="heavy">S3  Buckets</rich_text>
          <rich_text>
S3  Buckets are a storage service provided by Amazon AWS, allowing people  to save files and even static website content in the cloud accessible  over HTTP and HTTPS.
The format of the S3  buckets is http(s)://</rich_text>
          <rich_text weight="heavy">{name}.</rich_text>
          <rich_text link="webs http://s3.amazonaws.com/" weight="heavy">s3.amazonaws.com</rich_text>
          <rich_text>, where {name} is decided by the owner


</rich_text>
          <rich_text scale="h1">Automated Discovery</rich_text>
          <rich_text>

Some tools: </rich_text>
          <rich_text weight="heavy">ffuf</rich_text>
          <rich_text>, </rich_text>
          <rich_text weight="heavy">dirb</rich_text>
          <rich_text>, </rich_text>
          <rich_text weight="heavy">gobuster</rich_text>
          <rich_text>

ffuf -w &lt;wordlist&gt; -u &lt;url&gt;/FUZZ

dirb &lt;url&gt; &lt;wordlist&gt;

gobuster dir --url &lt;url&gt; -w &lt;wordlist&gt;</rich_text>
          <table char_offset="916" justification="left" col_min="60" col_max="60" col_widths="120,225,495">
            <row>
              <cell>site</cell>
              <cell>site:tryhackme.com</cell>
              <cell>returns results only from the specified website address</cell>
            </row>
            <row>
              <cell>inurl</cell>
              <cell>inurl:admin</cell>
              <cell>returns results that have the specified word in the URL</cell>
            </row>
            <row>
              <cell>filetype</cell>
              <cell>filetype:pdf</cell>
              <cell>returns results which are a particular file extension</cell>
            </row>
            <row>
              <cell>intitle</cell>
              <cell>intitle:admin</cell>
              <cell>returns results that contain the specified word in the title</cell>
            </row>
            <row>
              <cell>Filter</cell>
              <cell>Example</cell>
              <cell>Description</cell>
            </row>
          </table>
        </node>
      </node>
    </node>
  </node>
</cherrytree>
